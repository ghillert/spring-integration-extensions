description = 'Spring Integration EhcacheAdapter Adapter'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.5'
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.ehcache.adapter'

repositories {
	maven { url 'http://repo.springsource.org/libs-milestone' }
	maven { url 'http://repo.springsource.org/plugins-release' } // for bundlor
	maven { url 'http://www.terracotta.org/download/reflector/releases' }
}

// ensure JDK 5 compatibility (GRADLE-18; INT-1578)
sourceCompatibility=1.5
targetCompatibility=1.5

ext {
	aspectjVersion = '1.6.8'
	cglibVersion = '2.2'
	commonsNetVersion = '3.0.1'
	easymockVersion = '2.3'
	groovyVersion = '1.8.5'
	jacksonVersion = '1.9.2'
	javaxActivationVersion = '1.1.1'
	junitVersion = '4.8.2'
	log4jVersion = '1.2.12'
	mockitoVersion = '1.9.0'
	// When changing Spring Versions - don't forget to update bundlor ranges
	springVersion = '3.1.3.RELEASE'
	springIntegrationVersion = '2.1.2.RELEASE'
	springAmqpVersion = '1.1.0.RELEASE'
	springDataMongoVersion = '1.1.0.M1'
	springDataRedisVersion = '1.0.0.RELEASE'
	springGemfireVersion = '1.1.1.RELEASE'
	springSecurityVersion = '3.1.3.RELEASE'
	springSocialTwitterVersion = '1.0.1.RELEASE'
	springWsVersion = '2.0.3.RELEASE'
}

dependencies {
	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "org.springframework:spring-tx:$springVersion"
	compile("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", optional)
	compile "net.sf.ehcache:ehcache-core:2.6.0"

	compile("org.springframework.amqp:spring-rabbit:$springAmqpVersion") {
		exclude group: 'org.springframework', module: 'spring-aop'
		exclude group: 'org.springframework', module: 'spring-beans'
		exclude group: 'org.springframework', module: 'spring-context'
		exclude group: 'org.springframework', module: 'spring-core'
		exclude group: 'org.springframework', module: 'spring-oxm'
		exclude group: 'org.springframework', module: 'spring-tx'
	}

	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
}


eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

// dependencies that are common across all java projects
dependencies {
	testCompile "cglib:cglib-nodep:$cglibVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "log4j:log4j:$log4jVersion"
	testCompile "org.easymock:easymock:$easymockVersion"
	testCompile "org.easymock:easymockclassextension:$easymockVersion"
	testCompile "org.hamcrest:hamcrest-all:1.1"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
}

// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'docbook-reference'

reference {
	sourceDir = file('src/reference/docbook')
}

apply plugin: 'sonar'

sonar {

	if (rootProject.hasProperty('sonarHostUrl')) {
		server.url = rootProject.sonarHostUrl
	}

	database {
		if (rootProject.hasProperty('sonarJdbcUrl')) {
			url = rootProject.sonarJdbcUrl
		}
		if (rootProject.hasProperty('sonarJdbcDriver')) {
			driverClassName = rootProject.sonarJdbcDriver
		}
		if (rootProject.hasProperty('sonarJdbcUsername')) {
			username = rootProject.sonarJdbcUsername
		}
		if (rootProject.hasProperty('sonarJdbcPassword')) {
			password = rootProject.sonarJdbcPassword
		}
	}

	project {
		dynamicAnalysis  = "reuseReports"
		withProjectProperties { props ->
			props["sonar.core.codeCoveragePlugin"] = "jacoco"
			props["sonar.jacoco.reportPath"]       = "${buildDir.name}/jacoco.exec"
		}
	}

	logger.info("Sonar parameters used: server.url='${server.url}'; database.url='${database.url}'; database.driverClassName='${database.driverClassName}'; database.username='${database.username}'")
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'
	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	subprojects.each { subproject ->
		def Properties schemas = new Properties();
		def shortName = subproject.name.replaceFirst("${rootProject.name}-", '')
		if (subproject.name.endsWith("-core")) {
			shortName = ''
		}

		subproject.sourceSets.main.resources.find {
			it.path.endsWith('META-INF/spring.schemas')
		}?.withInputStream { schemas.load(it) }

		for (def key : schemas.keySet()) {
			File xsdFile = subproject.sourceSets.main.resources.find {
				it.path.endsWith(schemas.get(key))
			}
			assert xsdFile != null
			into ("integration/${shortName}") {
				from xsdFile.path
			}
		}
	}
}

task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('src/dist') {
			include 'changelog.txt'
		}

		from (api) {
			into 'api'
		}

		from (reference) {
			into 'reference'
		}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectNames = rootProject.subprojects*.name
			def artifacts = new HashSet()
			subprojects.each { subproject ->
				subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def dependency = artifact.moduleVersion.id
					if (!projectNames.contains(dependency.name)) {
						artifacts << artifact.file
					}
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.0-rc-3'
}
